<?php

namespace App\Http\Controllers;

use App\Http\Requests;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Storage;

class BackupController extends Controller
{

    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function checkIfBackup()
    {
        $files = Storage::files();
        foreach ($files as $file) {

        }
    }

    public function backup_tables($tables = '*')
    {
        if ($tables == '*') {
            $tables = array();
            $result = DB::select('SHOW TABLES');
            $stringTable = "Tables_in_" . env('DB_DATABASE');
            foreach ($result as $item) {
                $tables[] = $item->{$stringTable};
            }
        } else {
            $tables = is_array($tables) ? $tables : explode(',', $tables);
        }

        $return = "";
        foreach ($tables as $table) {
            $result = DB::table($table)->get();

            $return .= 'DROP TABLE ' . $table . ';';
            $row2 = DB::select('SHOW CREATE TABLE ' . $table);
            $showTable = $row2[0]->{"Create Table"};
            $return .= "\n\n" . $showTable . ";\n\n";

            $list = Schema::getColumnListing($table);
            foreach ($result as $item) {
                $arr = (array)$item;
                $keys = array_keys($arr);
                $return .= 'INSERT INTO ' . $table . ' VALUES(';
                for ($j = 0; $j < count($keys); $j++) {
                    $value = $item->{$keys[$j]};
                    $value = addslashes($value);
                    $value = str_replace("\n", "\\n", $value);
                    if (isset($value)) {
                        $return .= '"' . $value . '"';
                    } else {
                        $return .= '""';
                    }
                    if ($j < (count($list) - 1)) {
                        $return .= ',';
                    }
                }
                $return .= ");\n";
            }
        }
        $return .= "\n\n\n";

        $encriptedValue = Crypt::encrypt($return);

        Storage::put(
            'db-backup-' . time() . '-' . (md5(implode(',', $tables))) . '.sql',
            $encriptedValue
        );

        $bk = new \App\Backup();
        $bk->date_of_backup = Carbon::now();
        $bk->user_id = Auth::user()->id;
        $bk->save();

        if (!Request::ajax()) {
            return view('backup/index', [
                'lang' => 'ca',
                'title' => 'Backup de la bd',]);
        }
    }

    public function decryptBackup(\Illuminate\Http\Request $request)
    {
        if (!$request->isMethod('post')) abort(500);
        return "<pre>" . Crypt::decrypt("") . "</pre>";
    }
}
